'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _hasAttribute = require('./hasAttribute');

var _hasAttribute2 = _interopRequireDefault(_hasAttribute);

var _getAttributeValue = require('./getAttributeValue');

var _getAttributeValue2 = _interopRequireDefault(_getAttributeValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DOMElements = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr"];

var interactiveMap = {
  a: function a(attributes) {
    var hasHref = (0, _hasAttribute2.default)(attributes, 'href');
    var hasTabIndex = (0, _hasAttribute2.default)(attributes, 'tabIndex');
    return Boolean(hasHref) || !hasHref && Boolean(hasTabIndex);
  },
  button: function button() {
    return true;
  },
  input: function input(attributes) {
    var typeAttr = (0, _getAttributeValue2.default)((0, _hasAttribute2.default)(attributes, 'type'));
    return typeAttr ? typeAttr.toUpperCase() !== 'HIDDEN' : true;
  },
  option: function option() {
    return true;
  },
  select: function select() {
    return true;
  },
  textarea: function textarea() {
    return true;
  }
};

/**
 * Returns boolean indicating whether the given element is
 * interactive on the DOM or not. Usually used when an element
 * has a dynamic handler on it and we need to discern whether or not
 * it's intention is to be interacted with on the DOM.
 */
var isInteractiveElement = function isInteractiveElement(tagName, attributes) {
  // Do not test higher level JSX components, as we do not know what
  // low-level DOM element this maps to.
  if (DOMElements.indexOf(tagName) === -1) {
    return true;
  }

  if (interactiveMap.hasOwnProperty(tagName) === false) {
    return false;
  }

  return interactiveMap[tagName](attributes);
};

exports.default = isInteractiveElement;