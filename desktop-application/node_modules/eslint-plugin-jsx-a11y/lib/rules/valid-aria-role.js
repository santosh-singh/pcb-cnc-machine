/**
 * @fileoverview Enforce aria role attribute is valid.
 * @author Ethan Cohen
 */
'use strict';

// ----------------------------------------------------------------------------
// Rule Definition
// ----------------------------------------------------------------------------

var _validRoleTypes = require('../util/validRoleTypes');

var _validRoleTypes2 = _interopRequireDefault(_validRoleTypes);

var _getAttributeValue = require('../util/getAttributeValue');

var _getAttributeValue2 = _interopRequireDefault(_getAttributeValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var errorMessage = 'Elements with ARIA roles must use a valid, non-abstract ARIA role.';

var report = function report(context, node) {
  return context.report({
    node: node,
    message: errorMessage
  });
};

module.exports = function (context) {
  return {
    JSXAttribute: function JSXAttribute(attribute) {
      var normalizedName = attribute.name.name.toUpperCase();
      if (normalizedName !== 'ROLE') {
        return;
      }

      var normalizedType = attribute.value === null ? 'NULL' : attribute.value.type.toUpperCase();

      // Only check literals, as we cannot enforce variables representing role types.
      // Check expression containers to determine null or undefined values.
      if (normalizedType === 'JSXEXPRESSIONCONTAINER') {
        var expressionValue = (0, _getAttributeValue2.default)(attribute);
        var isUndefinedOrNull = expressionValue === undefined || expressionValue === null;

        if (isUndefinedOrNull) {
          report(context, attribute);
        }

        return;
      } else if (normalizedType === 'NULL') {
        // Report when <div role /> -- this assumes property truthiness, which is not a valid role.
        report(context, attribute);
        return;
      } else if (normalizedType !== 'LITERAL') {
        return;
      }

      // If value is a literal.
      var normalizedValues = attribute.value.value.toUpperCase().split(" ");
      var isValid = normalizedValues.every(function (value) {
        return _validRoleTypes2.default.indexOf(value) > -1;
      });

      if (isValid === false) {
        report(context, attribute);
      }
    }
  };
};

module.exports.schema = [{ type: 'object' }];