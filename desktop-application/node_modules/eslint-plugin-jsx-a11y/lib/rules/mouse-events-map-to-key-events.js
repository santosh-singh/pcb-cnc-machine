/**
 * @fileoverview Enforce onmouseover/onmouseout are
 *  accompanied by onfocus/onblur.
 * @author Ethan Cohen
 */
'use strict';

// ----------------------------------------------------------------------------
// Rule Definition
// ----------------------------------------------------------------------------

var _hasAttribute = require('../util/hasAttribute');

var _hasAttribute2 = _interopRequireDefault(_hasAttribute);

var _getAttributeValue = require('../util/getAttributeValue');

var _getAttributeValue2 = _interopRequireDefault(_getAttributeValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mouseOverErrorMessage = 'onMouseOver must be accompanied by onFocus for accessibility.';
var mouseOutErrorMessage = 'onMouseOut must be accompanied by onBlur for accessibility.';

module.exports = function (context) {
  return {
    JSXOpeningElement: function JSXOpeningElement(node) {
      var attributes = node.attributes;

      // Check onmouseover / onfocus pairing.
      var hasOnMouseOver = (0, _hasAttribute2.default)(attributes, 'onMouseOver');
      var onMouseOverValue = (0, _getAttributeValue2.default)(hasOnMouseOver);

      if (Boolean(hasOnMouseOver) === true && (onMouseOverValue !== null || onMouseOverValue !== undefined)) {
        var hasOnFocus = (0, _hasAttribute2.default)(attributes, 'onFocus');
        var onFocusValue = (0, _getAttributeValue2.default)(hasOnFocus);

        if (hasOnFocus === false || onFocusValue === null || onFocusValue === undefined) {
          context.report({
            node: node,
            message: mouseOverErrorMessage
          });
        }
      }

      // Checkout onmouseout / onblur pairing
      var hasOnMouseOut = (0, _hasAttribute2.default)(attributes, 'onMouseOut');
      var onMouseOutValue = (0, _getAttributeValue2.default)(hasOnMouseOut);
      if (Boolean(hasOnMouseOut) === true && (onMouseOutValue !== null || onMouseOutValue !== undefined)) {
        var hasOnBlur = (0, _hasAttribute2.default)(attributes, 'onBlur');
        var onBlurValue = (0, _getAttributeValue2.default)(hasOnBlur);

        if (hasOnBlur === false || onBlurValue === null || onBlurValue === undefined) {
          context.report({
            node: node,
            message: mouseOutErrorMessage
          });
        }
      }
    }
  };
};

module.exports.schema = [{ type: 'object' }];